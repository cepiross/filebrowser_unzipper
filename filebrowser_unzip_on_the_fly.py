"""
Django settings for filebrowser unzipper derived from https://djangosnippets.org/snippets/1893/
Appended to settings.py generated by 'django-admin startproject' using Django 1.11.2.

Prerequisite:
    django (https://www.djangoproject.com/),
    grappelli (http://django-grappelli.readthedocs.io/),
    and filebrowser (https://django-filebrowser.readthedocs.io)
"""
import zipfile, os, os.path
import shutil
from filebrowser.sites import site
from filebrowser.fields import FileBrowseField
from filebrowser.signals import filebrowser_post_upload

# Storage location
MEDIA_ROOT = '/django/media/root/'
FILEBROWSER_DIRECTORY = 'filebrowser/directory/'
FILEBROWSER_EXTENSIONS = {
    'Image': ['.jpg', '.jpeg', '.gif', '.png', '.tif', '.tiff'],
    'Archive': ['.zip']
}
FILEBROWSER_SELECT_FORMATS = {
    'file': ['Image', 'Archive'],
    'image': ['Image']
}
FILEBROWSER_MAX_UPLOAD_SIZE = 2147483648
FILEBROWSER_DEFAULT_PERMISSIONS = 0o744
FILEBROWSER_OVERWRITE_EXISTING = True

def post_upload_callback(sender, **kwargs):
    """
    Signal receiver called each time an upload has finished.
    Triggered by Filbrowser's filebrowser_post_upload signal:
    http://code.google.com/p/django-filebrowser/wiki/signals
    We are going to use this to unzip .zip files in place when/if they are uploaded.
    """

    if kwargs['file'].extension == ".zip":
        # Note: this does not test for corrupt zip files.
        # If encountered, user will get an HTTP error
        # and files will remain on the server

        # We get returned relative path names from Filebrowser
        path = kwargs['path']
        thefile = kwargs['file']

        # Convert file and dir into absolute paths
        fullpath = os.path.join(MEDIA_ROOT, site.directory, thefile.path_relative_directory)
        dirname = os.path.dirname(fullpath)
        filename = os.path.splitext(thefile.filename)[0]
        dstname = os.path.join(dirname, filename)        

        # Get a real Python file handle on the uploaded file
        fullpathhandle = open(fullpath, 'rb')
        if not os.path.exists(dstname):
            os.mkdir(dstname)
            os.chmod(dstname, 0o755)

        # Unzip the file, creating subdirectories as needed
        zfobj = zipfile.ZipFile(fullpathhandle)
        for name in zfobj.namelist():
            if name.endswith('/'):
                try: # Don't try to create a directory if exists
                    os.makedirs(os.path.join(dstname, name))
                    os.chmod(os.path.join(dstname, name), 0o755)
                except:
                    pass
            else:
                basedir = os.path.dirname(name)
                if basedir and not os.path.exists(os.path.join(dstname, basedir)):
                    os.makedirs(os.path.join(dstname, basedir), mode=0o755)
                    os.chmod(os.path.join(dstname, basedir), 0o755)
                outfile = open(os.path.join(dstname, name), 'wb')
                outfile.write(zfobj.read(name))
                outfile.close()
                os.chmod(os.path.join(dstname, name), 0o744)

        # Now try and delete the uploaded .zip file and the
        # stub __MACOSX dir if they exist
        try:
            os.remove(fullpath)
        except:
            pass

        try:
            osxjunk = os.path.join(dstname, '__MACOSX')
            shutil.rmtree(osxjunk)
        except:
            pass

# Signal provided by FileBrowser on every successful upload.
filebrowser_post_upload.connect(post_upload_callback)